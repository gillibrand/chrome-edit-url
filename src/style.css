*,
*::after,
*::before {
  box-sizing: border-box;
}

html {
  --first-col-width: 200px;
}

body {
  background-color: #f7f7f7;
  width: 750px;
  padding: 0.5rem;
  font-family: system-ui, -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto,
    Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;
}

input {
  font-family: 'Source Code Pro', 'Menlo', 'Consolas', 'Courier New', monospace;
}

input:not([type]),
input[type='text'] {
  border-radius: 3px;
  padding: 0.3rem;
  border: solid 1px rgb(101, 101, 101);
  min-width: 5rem;
  font-size: inherit;
}

h2 {
  margin-block: 1rem;
  color: gray;
  font-size: inherit;
  margin: 1.25rem 0 0.5rem;
}

body.is-dragging,
body.is-dragging * {
  cursor: ew-resize !important;
}

.ParamTable {
  /* Counteract the margin on top row. We could not add it there, but then the animations are harder
  since removing the top row would need to change the margins around. This way, each row is the
  same, but there is a gap we need to remove at the top with this. */
  margin-top: -0.5rem;
}

/* Each row has a wrapper element to make it easy to animate a wipe in/out effect. The means each
row is a separate grid, and all rows needs to have the same width content so they all line up. */
.ParamTable__row-wrapper {
  overflow: hidden;
}

.ParamTable__row {
  margin-top: 0.5rem;

  display: grid;
  position: relative;
  grid-template-columns: var(--first-col-width) auto 1fr auto;
  gap: 0.5rem;
  overflow: hidden;
  align-items: center;
}

.ParamTable__eq {
  cursor: ew-resize;
}

.ParamTable__eq.is-dragging {
  background-color: #ddd;
}

.splitter {
  position: absolute;
  opacity: 0;
  cursor: ew-resize;
  transition: opacity 100ms ease 25ms;
  background-color: gray;

  &:hover {
    opacity: 0.15;
  }

  body.is-dragging & {
    opacity: 0.3;
  }
}

footer {
  display: flex;
  gap: 1rem;
  justify-content: flex-end;
  margin-block-start: 2rem;
  align-items: center;
  button {
    min-width: 5rem;
  }
}

footer button {
  appearance: none;
  border: solid 1px #999;

  padding: 0.25rem 0.75rem;
  border-radius: 0.3rem;
  background-color: #fff;

  box-shadow: 0 1px 1px rgba(0, 0, 0, 0.05),
    inset 0 1px 1px rgba(255, 255, 255, 0.2);

  &:not(:disabled) {
    border-bottom-color: #333;

    &:hover {
      background-color: #f7f7f7;
    }

    &:active {
      background-color: #dedede;
    }
  }

  &:not([disabled]).is-default {
    color: white;
    background-color: #2b68d1;
    border-bottom-color: #113762;

    box-shadow: 0 1px 1px rgba(0, 0, 0, 0.15),
      inset 0 1px 1px rgba(255, 255, 255, 0.2);

    &:hover {
      background-color: rgb(35, 133, 232);
    }

    &:active {
      background-color: rgb(29, 110, 191);
    }
  }
}

.delete-button {
  appearance: none;
  padding: 0;
  display: grid;
  align-items: center;
  justify-items: center;
  height: 24px;
  width: 24px;
  border: none;
  background-color: transparent;
  border-radius: 3px;
  color: #666;

  &:disabled {
    visibility: hidden;
  }

  &:hover:not(:disabled) {
    background-color: rgb(222, 66, 66);
    svg {
      color: white;
    }
  }

  & > svg {
    width: 16px;
    height: 16px;
  }
}

/* Utils */

.block {
  display: block;
}

.w-full {
  width: 100%;
}

.mt-0 {
  margin-block-start: 0;
}

.mt-4 {
  margin-block-start: 1rem;
}

.flex-auto {
  flex: auto;
}

.cursor-default {
  cursor: default;
}

.clown {
  transition: transform 500ms ease-in;
  transform: rotate(0);
  transform-origin: center 20px;
  display: inline-block;
  max-width: 32px;
  object-fit: fill;
}

.clown:hover {
  /* animation: anim-rotate 1s linear infinite; */
  transform: rotate(360deg);
}
